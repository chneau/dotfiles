# shellcheck shell=bash
# shellcheck disable=SC2142,SC2154,SC1090,SC2046,SC2016,SC2094

alias a='ansible'
alias addselftogroup='f(){ sudo adduser $USER $1; exec sudo su -l $USER; unset -f f; }; f'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias apti='sudo apt install -y'
alias aptr='sudo apt remove --auto-remove -y'
alias b='bun'
alias banip='sudo iptables -A INPUT -j DROP -s '
alias bench='hyperfine'
alias bh='bun --hot'
alias bi='bun install --force --no-save'
alias br='bun run'
alias bs='bun run start'
alias btop='bpytop'
alias bup='zi update --all --parallel & brew upgrade & bun upgrade & npmig & updateall & updatebashrc & wait'
alias bw='bun --watch'
alias cleanos='rm -rf bleachbit && HOME= git clone --depth=1 https://github.com/bleachbit/bleachbit && python3 bleachbit/bleachbit.py --list | grep -v system.free_disk_space | grep -v system.memory | grep -v deepscan | xargs sudo python3 bleachbit/bleachbit.py --clean && rm -rf bleachbit'
alias completeall='completeall'
alias cpuinfo='lscpu'
alias crictlprune='crictl images -q | xargs -n 1 crictl rmi' # crictl rmi --prune
alias ct='column -t'
alias curlt='curlt'
alias d='docker'
alias db='docker build -t'
alias dc='docker-compose'
alias dcode='docker run -p 127.0.0.1:8443:8443 -v "${PWD}:/root/project" codercom/code-server code-server --allow-http --no-auth'
alias de='docker exec -it'
alias df='df -Tha --total'
alias diff='diff --color -u -w'
alias dir='dir --color=auto'
alias diskspace='du -S | sort -n -r | more'
alias dk='docker run --rm -it --name=kaggle -p=8080:8080 -v=`pwd`:`pwd` -w=`pwd` kaggle/python jupyter notebook --no-browser --notebook-dir=`pwd` --allow-root --port=8080 --ip=\*'
alias dkill='docker kill $(docker ps -q)'
alias dl='docker logs --tail 40 -f'
alias dlfast='lux -n 100 -m'
alias dlog='docker ps -q | xargs -L 1 -P `docker ps | wc -l` docker logs --since 30s -f'
alias dm='docker run --net=host --rm -itv `pwd`:`pwd` -w `pwd` -u 1000 mongo'
alias dmm='docker run --net=host --rm -it mrvautin/adminmongo'
alias dn='docker run --rm -itv `pwd`:`pwd` -w `pwd` -u 1000 node:alpine'
alias dnd='docker run --rm -it --no-healthcheck --security-opt apparmor=unconfined --name netdata --hostname netdata --cap-add SYS_PTRACE -v /etc/passwd:/host/etc/passwd:ro -v /etc/group:/host/etc/group:ro -v /proc:/host/proc:ro -v /sys:/host/sys:ro -v /etc/os-release:/host/etc/os-release:ro -v /var/run/docker.sock:/var/run/docker.sock:ro -p 19999:19999 netdata/netdata'
alias dndd='docker run -d --restart always --no-healthcheck --security-opt apparmor=unconfined --name netdata --hostname netdata --cap-add SYS_PTRACE -v /etc/passwd:/host/etc/passwd:ro -v /etc/group:/host/etc/group:ro -v /proc:/host/proc:ro -v /sys:/host/sys:ro -v /etc/os-release:/host/etc/os-release:ro -v /var/run/docker.sock:/var/run/docker.sock:ro -p 19999:19999 netdata/netdata'
alias dockertags='dockertags'
alias dockerup='docker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --debug --run-once'
alias doh='docker history'
alias dotnethttps='dotnet dev-certs https --clean && dotnet dev-certs https --trust'
alias dotneti='f(){ dotnet tool install --global "$1" || dotnet tool update --global "$1"; unset -f f; }; f'
alias dotnetig='dotnet tool install --global dotnet-outdated-tool || dotnet tool update --global dotnet-outdated-tool'
alias dotnetup='dotnet outdated --upgrade'
alias dpihole='docker run -d --name pihole -p 53:53/tcp -p 53:53/udp -p 1080:80 -e TZ="Europe/London" -v "$(pwd)/pihole/etc/pihole/:/etc/pihole/" -v "$(pwd)/pihole/etc/dnsmasq.d/:/etc/dnsmasq.d/" --dns=127.0.0.1 --dns=1.1.1.1 --restart=unless-stopped --hostname pihole -e VIRTUAL_HOST="pihole" -e PROXY_LOCATION="pihole" -e ServerIP="127.0.0.1" pihole/pihole:latest'
alias dprune='docker system prune -f --volumes'
alias dprunea='docker system prune -af --volumes'
alias drm='docker rmi $(docker images -q --filter "dangling=true")'
alias ds='docker stats'
alias dsave='f(){ docker save "$1" | gzip >"$1.tgz" && echo "$1.tgz created";  unset -f f; }; f'
alias dsd='docker stack down'
alias dsi='docker service inspect --pretty'
alias dsl='docker service logs -f'
alias dsls='docker service ls --tail 40'
alias dsu='docker stack up -c'
alias dt='docker run --rm -it'
alias dtest='docker run --rm -it --name test --hostname test'
alias dtf='docker run --rm -it --name=kaggle -p=8080:8080 -v=`pwd`:`pwd` -w=`pwd` tensorflow/tensorflow jupyter notebook --no-browser --notebook-dir=`pwd` --allow-root --port=8080 --ip=\*'
alias dtts='docker run --rm -it -v $HOME/docker/tts/:/root/.local/share/tts/ -v $PWD:$PWD -w $PWD ghcr.io/coqui-ai/tts-cpu'
alias dttsfr='docker run --rm -it -v $HOME/docker/tts/:/root/.local/share/tts/ -v $PWD:$PWD -w $PWD ghcr.io/coqui-ai/tts-cpu --model_name "tts_models/fr/mai/tacotron2-DDC"'
alias du='\du -chs *'
alias dup='dockerup'
alias dwatch='docker run -d --restart=always --name=watchtower -v=/var/run/docker.sock:/var/run/docker.sock:ro containrrr/watchtower --cleanup'
alias e='\du * -cs | sort -nr | head'
alias egrep='egrep --color=auto'
alias exe='chmod u+x '
alias exportenv='export $(xargs < .env)'
alias extract='extract'
alias fail2banstatus='sudo fail2ban-client status sshd'
alias ff='freecache; free'
alias fgrep='fgrep --color=auto'
alias findfile='find -type f -name'
alias findtext='grep -rnw . -e'
alias fio='f(){ curl -F "file=@$@" https://file.io && echo;  unset -f f; }; f'
alias fio1='f(){ curl -F "file=@$@" https://file.io/?expires=1d && echo;  unset -f f; }; f'
alias firewall='iptlist'
alias fixgitbashbatfiles='fixgitbashbatfiles'
alias fixgpg='sudo apt-key adv --recv-key --keyserver keyserver.ubuntu.com'
alias fixionotify='fixionotifywatches; fixionotifyinstances'
alias fixionotifyinstances='grep -Fxq "fs.inotify.max_user_instances=524288" /etc/sysctl.conf || echo fs.inotify.max_user_instances=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p'
alias fixionotifywatches='grep -Fxq "fs.inotify.max_user_watches=524288" /etc/sysctl.conf || echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p'
alias fixsleep='sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target'
alias fixsshperm='chown `id -u` ~/; chown `id -u` ~/.ssh; chmod go-w ~/; chmod 700 ~/.ssh; chmod 600 ~/.ssh/authorized_keys; chmod 600 ~/.ssh/id_rsa; chmod 600 ~/.ssh/config; chmod 644 ~/.ssh/id_rsa.pub'
alias fixtz='timedatectl set-timezone Europe/London'
alias free='free -mt'
alias freecache='sudo sh -c "echo 3 > /proc/sys/vm/drop_caches"'
alias g='grep -C5 --color=auto'
alias ga='git add'
alias gb='git branch --sort=-committerdate -vv'
alias gba='git branch --sort=-committerdate -vva'
alias gc='git commit -v'
alias gca='git commit . -v'
alias gcl='git clone'
alias gco='git checkout'
alias gcom='git checkout master'
alias gd='git diff'
alias genpwd='PASSWORD=$(base64 < /dev/urandom | head -c32); echo "$PASSWORD"; echo -n "$PASSWORD" | sha256sum; echo -n "$PASSWORD" | sha256sum | head -c 16; echo; < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-16}; echo;'
alias genuuid="python -c 'import uuid; print(uuid.uuid4())'"
alias gg='git pull -f; git reset --hard origin/master'
alias gigit='git clone --depth=1'
alias gitclean='git reflog expire --expire=now --all; git repack -ad; git prune; git fetch --prune --prune-tags; GIT_ASK_YESNO=false git clean -ffdx'
alias gitget='gitget'
alias gitgetc='f(){ gitget "https://github.com/chneau/$1"; }; f'
alias gitmessage='curl -s http://whatthecommit.com/index.txt'
alias gitnewfresh='git checkout --orphan'
alias gitrmtag='git push -d origin'
alias gl='git pull'
alias gla='git pull --all'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias glom='git pull origin master'
alias gobuild="CGO_ENABLED=0 go build -trimpath -ldflags '-s -w -extldflags \"-static\"'"
alias gocd='f(){ cd ~/go/src/${1#*://}; unset -f f; }; f'
alias goget='f(){ go get -u -v ${1#*://}; unset -f f; }; f'
alias goi='go install'
alias gols="go list -f '{{join .Deps \"\n\"}}' | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'"
alias gotest='go test -cover -count=1'
alias goup='rm -f go.mod go.sum && go mod init && go get -u && go mod tidy'
alias gp='git push'
alias gpcb='f(){ git push origin $(git branch --show-current):"$1"; unset -f f; }; f'
alias gpgexport='gpg --armor --export'             # +key
alias gpggit='git config --global user.signingkey' # +key
alias gpglist='gpg --list-secret-keys --keyid-format LONG'
alias gpgnew='gpg --default-new-key-algo rsa4096 --gen-key'
alias gpm='git push origin $(git branch --show-current):master'
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'
alias grb="git fetch --all; git for-each-ref --sort=-committerdate --format='%(HEAD) %(color:blue)%(authordate:iso) %(color:red)%(objectname:short) %(color:yellow)%(refname:short) %(color:reset)%(contents:subject) %(color:magenta)%(authorname) %(color:green)%(committerdate:relative)' refs"
alias grep='grep --color=auto'
alias grephere='grep -rnw . -e'
alias grm='git ls-files --deleted | xargs git rm'
alias gs='git status -sb'
alias gundopush='git push -f origin HEAD^:master'
alias h='f(){ echo -e "$(curl -s cht.sh/$@)"; unset -f f; }; f'
alias hla='helm list --all-namespaces'
alias hp='sudo hping3 --flood'
alias hs='history | grep $1'
alias iact='curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash'
alias iarkade='curl -sLS https://dl.get-arkade.dev | sudo sh'
alias iaz='curl -L https://aka.ms/InstallAzureCli | bash'
alias ibpytop='pip install bpytop'
alias ibrew='bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'
alias ibun='curl -fsSL https://bun.sh/install | bash'
alias icroc='go install github.com/schollz/croc/v9@latest'
alias idatree='go install github.com/datreeio/datree@latest'
alias ideno='curl -fsSL https://deno.land/install.sh | sh'
alias idl='pip install -U yt-dlp'
alias idocker='curl -sSL get.docker.com | sh'
alias idockercompose='pip install docker-compose'
alias idotnet='curl -sSL https://dot.net/v1/dotnet-install.sh | bash -s -- --channel 6.0'
alias idotnetpreview='curl -L https://aka.ms/install-dotnet-preview -o install-dotnet-preview.sh && sudo bash install-dotnet-preview.sh'
alias ifail2ban='ifail2ban'
alias ifluxctl='sudo snap install fluxctl --classic'
alias ifnm='curl -fsSL https://fnm.vercel.app/install | bash'
alias igit='git config --global user.email "charles63500@gmail.com"; git config --global user.name "chneau"; git config --global url.ssh://git@github.com/.insteadOf https://github.com/; git config --global merge.ff false; git config --global pull.ff true; git config --global core.whitespace blank-at-eol,blank-at-eof,space-before-tab,cr-at-eol; git config --global fetch.prune true; git config --global pull.rebase true'
alias igo='curl -LO https://get.golang.org/$(uname)/go_installer && chmod +x go_installer && ./go_installer && rm go_installer'
alias igoogler='curl -sSLO https://raw.githubusercontent.com/jarun/googler/master/googler && exe googler && echo "move googler in some path"'
alias igotop='go install github.com/xxxserxxx/gotop/v4@latest'
alias igotty='go install github.com/yudai/gotty@latest'
alias igradle='echo "org.gradle.console=plain" > ~/.gradle/gradle.properties'
alias ihey='go install github.com/rakyll/hey@latest'
alias ik3d='curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash'
alias ik3s='curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable=traefik" sh -s -'
alias ik3slatest='curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable=traefik" INSTALL_K3S_CHANNEL=latest sh -s -'
alias ik3sup='go install github.com/alexellis/k3sup@latest'
alias ik8s='curl -sSL https://get.k8s.io | bash'
alias ik9s='go install github.com/derailed/k9s@latest'
alias ikind='go install sigs.k8s.io/kind@latest'
alias ikubectl='curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && chmod u+x kubectl && sudo mv kubectl /usr/local/bin/'
alias ikubectx='go install github.com/ahmetb/kubectx/cmd/kubectx@latest'
alias ikubens='go install github.com/ahmetb/kubectx/cmd/kubens@latest'
alias ilivereload='pip install livereload'
alias ilux='go install github.com/iawia002/lux@latest'
alias imeteor='curl -sSL install.meteor.com | sh'
alias imicro='curl https://getmic.ro | bash'
alias iminikube='curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.23.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/'
alias inextdns='sh -c "$(curl -sL https://nextdns.io/install)"'
alias inix='sh <(curl -L https://nixos.org/nix/install) --no-daemon'
alias invm='curl -sSL https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash'
alias ioctant='go get github.com/vmware-tanzu/octant/cmd/octant@latest' # does not work on windows
alias iombash='bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"'
alias iomzsh='sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'
alias ipt='sudo /sbin/iptables'
alias iptableclean='iptables-save | uniq | iptables-restore'
alias iptlist='sudo /sbin/iptables -L -n -v --line-numbers'
alias iptlistfw='sudo /sbin/iptables -L FORWARD -n -v --line-numbers'
alias iptlistin='sudo /sbin/iptables -L INPUT -n -v --line-numbers'
alias iptlistout='sudo /sbin/iptables -L OUTPUT -n -v --line-numbers'
alias ipulumi='curl -fsSL https://get.pulumi.com | sh'
alias irio='curl -sfL https://get.rio.io | sh -'
alias irust='curl https://sh.rustup.rs -sSf | sh'
alias iscc='go install github.com/boyter/scc/v3@latest'
alias iserve='go install github.com/chneau/serve@latest'
alias ispeedtest='curl -s https://install.speedtest.net/app/cli/install.deb.sh | sudo bash'
alias issh='ssh-keygen -t rsa -b 2048'
alias isshuttle='sudo apt -y install sshuttle'
alias iv='gitget https://github.com/vlang/v && make && sudo ./v symlink && v ls --install &&'
alias ivagrant='sudo apt -y install vagrant'
alias ivirtualbox='sudo apt -y install virtualbox'
alias ivpn='ivpnnyr'
alias ivpnangristan='wget https://raw.githubusercontent.com/Angristan/OpenVPN-install/master/openvpn-install.sh -O openvpn-angristan-install.sh && bash openvpn-angristan-install.sh'
alias ivpnnyr='wget https://raw.githubusercontent.com/Nyr/openvpn-install/master/openvpn-install.sh -O openvpn-nyr-install.sh && bash openvpn-nyr-install.sh'
alias jctl='journalctl -n 200 -f'
alias k='kubectl'
alias k3sconfig='cat /etc/rancher/k3s/k3s.yaml'
alias k3sdisabletraefik='helm -n kube-system delete traefik; helm -n kube-system delete traefik-crd; kubectl -n kube-system delete helmchart traefik traefik-crd'
alias k3sdisabletraefikonserver='touch /var/lib/rancher/k3s/server/manifests/traefik.yaml.skip; systemctl restart k3s'
alias k3sstart='sudo systemctl start k3s'
alias k3sstop='sudo systemctl stop k3s'
alias ka='kubectl apply -f'
alias kak='kubectl apply -k'
alias kar='kubectl api-resources'
alias kclean='kubectl delete $(kubectl get all | grep replicaset.apps | grep "0         0         0" | cut -d" " -f 1); kubectl get pods --field-selector "status.phase==Failed" -o json | kubectl delete -f -'
alias kconf='kubectl config view --raw'
alias kcron='echo "kubectl create job --from=cronjob/dump manual-001"'
alias kctx='kubectx'
alias kd='kubectl diff -f'
alias kdebug='kubectl run -i --tty --rm debug --image=alpine --restart=Never -- sh'
alias kdecode="f(){ kubectl get secret \"\$1\" --template='{{range \$k,\$v := .data}}{{printf \"%s: \" \$k}}{{if not \$v}}{{\$v}}{{else}}{{\$v | base64decode}}{{end}}{{\"\\n\"}}{{end}}'; unset -f f; }; f"
alias kdes='kubectl describe'
alias kdestroy='kubectl delete --grace-period=0 --force'
alias kdk='kubectl diff -k'
alias ke='kubectl exec -ti '
alias kenv='kubectl set env pods --all --list'
alias kg='kubectl get'
alias kga='kubectl get all,ingress'
alias kgapi='kubectl get apiservices'
alias kgd='kubectl get deployment,statefulset,daemonset,cronjob'
alias kge='kubectl get events'
alias kgea='kubectl get events --all-namespaces'
alias kgs='kubectl get secret'
alias killalljobs='kill `jobs -p`'
alias kk='kubectl kustomize'
alias kl='kubectl logs -f --tail=40'
alias klall='kubectl logs --selector=app --all-containers --ignore-errors --follow --max-log-requests=999 --timestamps --prefix'
alias kll='kubectl logs -f --tail=40 --timestamps --prefix'
alias kns='kubens'
alias kpf='kubectl port-forward'
alias kr='kubectl rollout'
alias krr='kubectl rollout restart'
alias ks0='kubectl scale --replicas=0 deployment --all; kubectl scale --replicas=0 statefulset --all'
alias ks1='kubectl scale --replicas=1 deployment --all; kubectl scale --replicas=1 statefulset --all'
alias ktest='f(){ kubectl run -i --tty --rm debug --image="$1" --restart=Never -- ${@:2}; unset -f f; }; f'
alias ktn='kubectl top nodes'
alias ktp='kubectl top pods'
alias ktpa='kubectl top pods --all-namespaces'
alias kw='kubectl get po -w'
alias l='ls -CF'
alias la='ls -A'
alias lh='ls -lh'
alias ll='ls -alFh'
alias lld='ls -alFhtr --group-directories-first'
alias lo='ls -o'
alias ls='ls --color=auto'
alias m='make'
alias mapscii='telnet mapscii.me'
alias meminfo='free -m -l -t'
alias mh='curl ifconfig.me/host'
alias mip='curl api.ipify.org && echo'
alias mip2='curl icanhazip.com'
alias mkcdir='f(){ mkdir -- "$1" && cd -P -- "$1"; unset -f f; }; f'
alias mkdir='mkdir -pv'
alias n='printf "\n\n\nx=\"raw.githubusercontent.com/chneau/dotfiles/master/bootstrap.sh\"; (curl -fsSL \$x || wget -qO - \$x) | sh\n\n\n\n"'
alias newstorybook='npx storybook@latest init'
alias newrefine='npm create refine-app@latest .'
alias newvite='npm create vite@latest . -- --template react-swc-ts'
alias nginxreload='sudo /usr/local/nginx/sbin/nginx -s reload'
alias nginxtest='sudo /usr/local/nginx/sbin/nginx -t'
alias nload='nload -m -u M'
alias nmr='sudo service network-manager restart'
alias nopasswd='echo "$USER ALL=(ALL:ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/$USER'
alias now='date +"%T"'
alias nowdate='date +"%d-%m-%Y"'
alias nowtime=now
alias npme='npm exec --yes --'
alias npmig='x="npm@latest ungit@latest npm-check@latest npm-check-updates@latest nodemon@latest prettier@latest typesync@latest depcheck@latest concurrently@latest ts-unused-exports@latest"; bun i -fg $x || npm i -g $x'
alias npmup='ncu --upgrade --target=minor && npm install --silent && ncu'
alias nud='nvm use default'
alias nx='f(){ nodemon --signal SIGTERM --ext "$1" --exec "${*:2} || false"; unset -f f; }; f'
alias oc='code -a .'
alias openports='nmap -p- portquiz.net | grep -i open'
alias path='echo -e ${PATH//:/\\n}'
alias pipi="pip install --upgrade --user"
alias pipup="pip list --format freeze --outdated | sed 's/=.*//g' | xargs -n1 pip install -U"
alias pipupg="pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U"
alias poefilterup='poefilterup'
alias portkill='f(){ sudo fuser -k "$1/tcp"; unset -f f; }; f'
alias ports='netstat -tulanp'
alias ps='ps auxf'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pstats='powerstat -d 0 -f 1'
alias refresh='clear; exec $SHELL'
alias refreshgroups='exec sudo su -l $USER'
alias renewip='sudo dhclient -v -r && sudo dhclient -v'
alias rmdot='for f in *.*; do pre="${f%.*}"; suf="${f##*.}"; mv -i -- "$f" "${pre//./_}.${suf}"; done'
alias root='\sudo \su'
alias s='strace -fqc'
alias screen='screen -q'
alias serveo='f(){ ssh -o "StrictHostKeyChecking no" -R 80:localhost:$1 localhost.run; unset -f f; }; f'
alias servepy='python -m http.server'
alias sshgenkey='mkdir -p .ssh && ssh-keygen -t rsa -f .ssh/id_rsa -q -N ""'
alias sshkillagents='ssh-add -D; ssh-agent -k'
alias sss='service --status-all'
alias sudo='sudo env "PATH=$PATH" '
alias t='terraform'
alias theia='docker run -it -p 3000:3000 -v "$(pwd):/home/project:cached" theiaide/theia:next'
alias tobase64='base64 -w 0; echo'
alias toix="curl -F 'f:1=<-' ix.io"
alias toqrcode='curl -F-=\<- qrenco.de'
alias traefikauth='f(){ echo $(htpasswd -nb $1 $2) | sed -e s/\\$/\\$\\$/g; unset -f f; }; f'
alias transfer='transfer'
alias u='ls -hltr'
alias up='updatebashrc; updateall'
alias upb='updatebashrc; refresh'
alias update='updatebashrc; updateall'
alias updateall='sudo apt update && sudo apt -y full-upgrade --auto-remove --purge'
alias updatebashrc='(curl -H "Cache-Control: no-cache, no-store" -fsSL "raw.githubusercontent.com/chneau/dotfiles/master/bootstrap.sh?$(date +%s)" || wget --no-cookies --no-cache -qO - "raw.githubusercontent.com/chneau/dotfiles/master/bootstrap.sh?$(date +%s)") | sh'
alias va='vagrant'
alias vdir='vdir --color=auto'
alias weather='f(){ curl -s wttr.in/"$1"; unset -f f; }; f'
alias webshare='python -m SimpleHTTPServer'
alias wsldocker='wsl --user root service docker start; wsl'
alias yabs='curl -sL yabs.sh | bash -s -- -i'
alias yabsgeekbench='curl -sL yabs.sh | bash -s -- -ifd'
alias yabswithiperf='curl -sL yabs.sh | bash -s -- -r'
alias ymp3='yt-dlp --restrict-filenames --continue --ignore-errors --download-archive downloaded.txt --no-post-overwrites --no-overwrites --extract-audio --audio-format mp3 --output "%(title)s.%(ext)s"' # --min-views --match-filter '!is_live'
alias ymp4='yt-dlp -S res,ext:mp4:m4a --recode mp4'
alias yt='docker run --rm -u $(id -u):$(id -g) -v $PWD:/data vimagick/youtube-dl'
alias z='zig'
alias zb='zig build'
alias zbr='zig build run'
alias ziup='zi update --all --parallel'
alias zr='zig run'
alias zshdefault='command -v zsh | sudo tee -a /etc/shells && sudo chsh -s $(which zsh) $USER'

function completeall() {
    if command -v kubectl &>/dev/null; then
        source <(kubectl completion bash)
    fi
    eval "$(curl -sSL https://raw.githubusercontent.com/scop/bash-completion/master/bash_completion)"
    eval "$(curl -sSL https://raw.githubusercontent.com/cykerway/complete-alias/master/complete_alias)"
    complete -F _complete_alias $(alias | while read -r line; do
        line="${line%%=*}"
        echo "${line:6}"
    done)
}

function fixgitbashbatfiles() {
    for var in *.bat; do
        printf '#!/bin/sh\ncmd //c "$0.bat" "$@"\n' >"${var%.bat}"
        echo "Created ${var%.bat}"
    done
}

function ifail2ban() {
    sudo apt-get install fail2ban
    sudo systemctl enable fail2ban.service
    echo "Creating /etc/fail2ban/jail.local with default values"
    {
        echo "[sshd]"
        echo "enabled = true"
        echo "port = ssh"
        echo "filter = sshd"
        echo "logpath = /var/log/auth.log"
        echo "maxretry = 3"
        echo "findtime = 300"
        echo "bantime = 3600"
        echo "ignoreip = 127.0.0.1"
    } >/etc/fail2ban/jail.local
    echo "Restarting fail2ban"
    sudo systemctl restart fail2ban.service
    echo "Check status with fail2banstatus or 'sudo fail2ban-client status sshd'"
}

function transfer() {
    if [ $# -eq 0 ]; then
        printf "No arguments specified.\nUsage:\n transfer <file|directory>\n ... | transfer <file_name>\n" >&2
        return 1
    fi
    if tty -s; then
        file="$1"
        file_name=$(basename "$file")
        if [ ! -e "$file" ]; then
            echo "$file: No such file or directory" >&2
            return 1
        fi
        if [ -d "$file" ]; then
            file_name="$file_name.zip",
            (cd "$file" && zip -r -q - .) | curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name" | tee /dev/null,
        else curl <"$file" --progress-bar --upload-file "-" "https://transfer.sh/$file_name" | tee /dev/null; fi
    else
        file_name=$1
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name" | tee /dev/null
    fi
    echo
}

function curlt() {
    curl -so /dev/null -w "\
   namelookup:  %{time_namelookup}s\n\
      connect:  %{time_connect}s\n\
   appconnect:  %{time_appconnect}s\n\
  pretransfer:  %{time_pretransfer}s\n\
     redirect:  %{time_redirect}s\n\
starttransfer:  %{time_starttransfer}s\n\
-------------------------\n\
        total:  %{time_total}s\n" "$@"
}

function gitget() {
    git_url=$1
    repo_name=${git_url#*://}
    clone_dir=~/go/src/$repo_name

    if ! [[ "$1" =~ ^.*:// ]]; then
        git_url=https://$git_url
    fi

    if ! git ls-remote "$git_url" >/dev/null 2>&1; then
        echo Repository "$git_url" not found !
        exit 1
    fi

    echo Cloning "$repo_name" into "$clone_dir"
    rm -rf "$clone_dir"
    mkdir -p "$clone_dir" >/dev/null
    git clone --quiet "$git_url" "$clone_dir"

    gocd "$git_url"
}

function extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
        return 1
    else
        for n in "$@"; do
            if [ -f "$n" ]; then
                case "${n%,}" in
                *.tar.bz2 | *.tar.gz | *.tar.xz | *.tbz2 | *.tgz | *.txz | *.tar)
                    tar xvf "$n"
                    ;;
                *.lzma) unlzma ./"$n" ;;
                *.bz2) bunzip2 ./"$n" ;;
                *.rar) unrar x -ad ./"$n" ;;
                *.gz) gunzip ./"$n" ;;
                *.zip) unzip ./"$n" ;;
                *.z) uncompress ./"$n" ;;
                *.7z | *.arj | *.cab | *.chm | *.deb | *.dmg | *.iso | *.lzh | *.msi | *.rpm | *.udf | *.wim | *.xar)
                    7z x ./"$n"
                    ;;
                *.xz) unxz ./"$n" ;;
                *.exe) cabextract ./"$n" ;;
                *)
                    echo "extract: '$n' - unknown archive method"
                    return 1
                    ;;
                esac
            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}

function poefilterup() {
    cd ~/Documents/My\ Games/Path\ of\ Exile/ || return
    (curl -so "NeverSink's filter - 0-SOFT.filter" "https://raw.githubusercontent.com/NeverSinkDev/NeverSink-Filter/master/NeverSink's%20filter%20-%200-SOFT.filter" &)
    (curl -so "NeverSink's filter - 1-REGULAR.filter" "https://raw.githubusercontent.com/NeverSinkDev/NeverSink-Filter/master/NeverSink's%20filter%20-%201-REGULAR.filter" &)
    (curl -so "NeverSink's filter - 2-SEMI-STRICT.filter" "https://raw.githubusercontent.com/NeverSinkDev/NeverSink-Filter/master/NeverSink's%20filter%20-%202-SEMI-STRICT.filter" &)
    (curl -so "NeverSink's filter - 3-STRICT.filter" "https://raw.githubusercontent.com/NeverSinkDev/NeverSink-Filter/master/NeverSink's%20filter%20-%203-STRICT.filter" &)
    (curl -so "NeverSink's filter - 4-VERY-STRICT.filter" "https://raw.githubusercontent.com/NeverSinkDev/NeverSink-Filter/master/NeverSink's%20filter%20-%204-VERY-STRICT.filter" &)
    (curl -so "NeverSink's filter - 5-UBER-STRICT.filter" "https://raw.githubusercontent.com/NeverSinkDev/NeverSink-Filter/master/NeverSink's%20filter%20-%205-UBER-STRICT.filter" &)
    (curl -so "NeverSink's filter - 6-UBER-PLUS-STRICT.filter" "https://raw.githubusercontent.com/NeverSinkDev/NeverSink-Filter/master/NeverSink's%20filter%20-%206-UBER-PLUS-STRICT.filter" &)
    cd - >/dev/null || return
    wait
    echo "Downloaded filters from master branch"
}

function dockertags() {
    if [ $# -lt 1 ]; then
        cat <<HELP
dockertags  --  list all tags for a Docker image on a remote registry.

EXAMPLE:
    - list all tags for ubuntu:
       dockertags ubuntu

    - list all php tags containing apache:
       dockertags php apache

HELP
    fi

    image="$1"
    tags=$(curl -s https://registry.hub.docker.com/v1/repositories/"${image}"/tags | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n' | awk -F: '{print $3}')

    if [ -n "$2" ]; then
        tags=$(echo "${tags}" | grep "$2")
    fi

    echo "${tags}"
}
